{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"username\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n    authorize: async credentials => {\n      const user = credentials => {\n        console.log(credentials); // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n\n        return null;\n      };\n\n      if (user) {\n        // Any user object returned here will be saved in the JSON Web Token\n        return Promise.resolve(user);\n      } else {\n        return Promise.resolve(null);\n      }\n    }\n  })]\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/usr/src/app/pages/api/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","Credentials","name","credentials","username","label","type","placeholder","password","authorize","user","console","log","Promise","resolve","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CACA;;AAEA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXC,MAAAA,QAAQ,EAAE;AAAGH,QAAAA,KAAK,EAAE,UAAV;AAAsBC,QAAAA,IAAI,EAAE;AAA5B;AAFC,KANO;AAUpBG,IAAAA,SAAS,EAAE,MAAON,WAAP,IAAuB;AAChC,YAAMO,IAAI,GAAIP,WAAD,IAAiB;AAC5BQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ,EAD4B,CAE5B;AACA;AACA;AACA;;AACA,eAAO,IAAP;AACD,OAPD;;AAQA,UAAIO,IAAJ,EAAU;AACR;AACA,eAAOG,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,CAAP;AACD,OAHD,MAGO;AACL,eAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF;AAzBmB,GAAtB,CADS;AAFG,CAAhB;AAiCA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcnB,QAAQ,CAACkB,GAAD,EAAMC,GAAN,EAAWjB,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n// import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"username\" },\n        password: {  label: \"Password\", type: \"password\" }\n      },\n      authorize: async (credentials) => {\n        const user = (credentials) => {\n          console.log(credentials)\n          // You need to provide your own logic here that takes the credentials\n          // submitted and returns either a object representing a user or value\n          // that is false/null if the credentials are invalid.\n          // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n          return null\n        }\n        if (user) {\n          // Any user object returned here will be saved in the JSON Web Token\n          return Promise.resolve(user)\n        } else {\n          return Promise.resolve(null)\n        }\n      }\n    })\n  ]\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}