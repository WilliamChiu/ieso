{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n    authorize: async credentials => {\n      // Add logic here to look up the user from the credentials supplied\n      console.log(credentials);\n      const user = {\n        id: 1,\n        name: 'J Smith',\n        email: 'jsmith@example.com'\n      };\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return Promise.resolve(user);\n      } else {\n        // If you return null or false then the credentials will be rejected\n        return Promise.resolve(null); // You can also Reject this callback with an Error or with a URL:\n        // return Promise.reject(new Error('error message')) // Redirect to error page\n        // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n      }\n    }\n  })]\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/chillyblue/Documents/Programming/ieso/ieso-next-app/pages/api/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","Credentials","name","credentials","username","label","type","placeholder","password","authorize","console","log","user","id","email","Promise","resolve","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CACA;;AAEA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXC,MAAAA,QAAQ,EAAE;AAAGH,QAAAA,KAAK,EAAE,UAAV;AAAsBC,QAAAA,IAAI,EAAE;AAA5B;AAFC,KANO;AAUpBG,IAAAA,SAAS,EAAE,MAAON,WAAP,IAAuB;AAChC;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ;AACA,YAAMS,IAAI,GAAG;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASX,QAAAA,IAAI,EAAE,SAAf;AAA0BY,QAAAA,KAAK,EAAE;AAAjC,OAAb;;AAEA,UAAIF,IAAJ,EAAU;AACR;AACA,eAAOG,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,CAAP;AACD,OAHD,MAGO;AACL;AACA,eAAOG,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP,CAFK,CAGL;AACA;AACA;AACD;AACF;AAzBmB,GAAtB,CADS;AAFG,CAAhB;AAiCA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcrB,QAAQ,CAACoB,GAAD,EAAMC,GAAN,EAAWnB,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n// import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: {  label: \"Password\", type: \"password\" }\n      },\n      authorize: async (credentials) => {\n        // Add logic here to look up the user from the credentials supplied\n        console.log(credentials)\n        const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n  \n        if (user) {\n          // Any object returned will be saved in `user` property of the JWT\n          return Promise.resolve(user)\n        } else {\n          // If you return null or false then the credentials will be rejected\n          return Promise.resolve(null)\n          // You can also Reject this callback with an Error or with a URL:\n          // return Promise.reject(new Error('error message')) // Redirect to error page\n          // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n        }\n      }\n    })\n  ]\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}