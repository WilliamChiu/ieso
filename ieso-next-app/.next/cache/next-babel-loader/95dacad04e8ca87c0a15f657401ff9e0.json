{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport { MongoClient } from 'mongodb';\nconst uri = \"mongodb://mongo:27017\";\nconst SALT_ROUNDS = 12;\nconst client = new MongoClient(uri);\n\nconst handleGet = async res => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.send(`\n    <form method='post' action='/api/auth/register'>\n      <label>\n        Username\n        <input name='username' type='text'/>\n      </label>\n      <label>\n        Password\n        <input name='password' type='text'/>\n      </label>\n      <button type='submit'>Register</button>\n    </form>\n  `);\n};\n\nconst handlePost = async (username, password, method, res) => {\n  await client.connect();\n  const database = client.db(\"accounts\");\n  const collection = database.collection(\"users\");\n  let hash = await bcrypt.hash(password, SALT_ROUNDS);\n  const user = {\n    username,\n    hash\n  };\n  const result = await collection.insertOne(user);\n  console.log(result);\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(result));\n};\n\nexport default (async ({\n  body: {\n    username,\n    password\n  },\n  method\n}, res) => {\n  if (method !== \"POST\" && method !== \"GET\") {\n    res.statusCode = 405;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({\n      message: \"Register only accepts GET or POST requests\"\n    }));\n  } else if (method === \"GET\") await handleGet(res);else await handlePost(username, password, method, res);\n});","map":{"version":3,"sources":["/usr/src/app/pages/api/auth/register.js"],"names":["bcrypt","MongoClient","uri","SALT_ROUNDS","client","handleGet","res","statusCode","setHeader","send","handlePost","username","password","method","connect","database","db","collection","hash","user","result","insertOne","console","log","end","JSON","stringify","body","message"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,MAAMC,WAAW,GAAG,EAApB;AAEA,MAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBC,GAAhB,CAAf;;AAEA,MAAMG,SAAS,GAAG,MAAOC,GAAP,IAAe;AAC/BA,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,cAAd,EAA6B,WAA7B;AACAF,EAAAA,GAAG,CAACG,IAAJ,CAAU;;;;;;;;;;;;GAAV;AAaD,CAhBD;;AAkBA,MAAMC,UAAU,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,MAA3B,EAAmCP,GAAnC,KAA2C;AAC5D,QAAMF,MAAM,CAACU,OAAP,EAAN;AACA,QAAMC,QAAQ,GAAGX,MAAM,CAACY,EAAP,CAAU,UAAV,CAAjB;AACA,QAAMC,UAAU,GAAGF,QAAQ,CAACE,UAAT,CAAoB,OAApB,CAAnB;AAEA,MAAIC,IAAI,GAAG,MAAMlB,MAAM,CAACkB,IAAP,CAAYN,QAAZ,EAAsBT,WAAtB,CAAjB;AAEA,QAAMgB,IAAI,GAAG;AAAER,IAAAA,QAAF;AAAYO,IAAAA;AAAZ,GAAb;AACA,QAAME,MAAM,GAAG,MAAMH,UAAU,CAACI,SAAX,CAAqBF,IAArB,CAArB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAd,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAF,EAAAA,GAAG,CAACkB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAR;AACD,CAdD;;AAgBA,gBAAe,OAAO;AAACO,EAAAA,IAAI,EAAE;AAAChB,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAP;AAA6BC,EAAAA;AAA7B,CAAP,EAA6CP,GAA7C,KAAqD;AAClE,MAAIO,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AACzCP,IAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACAD,IAAAA,GAAG,CAACE,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAF,IAAAA,GAAG,CAACkB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAACE,MAAAA,OAAO,EAAE;AAAV,KAAf,CAAR;AACD,GAJD,MAKK,IAAIf,MAAM,KAAK,KAAf,EAAsB,MAAMR,SAAS,CAACC,GAAD,CAAf,CAAtB,KACA,MAAMI,UAAU,CAACC,QAAD,EAAWC,QAAX,EAAqBC,MAArB,EAA6BP,GAA7B,CAAhB;AACN,CARD","sourcesContent":["import bcrypt from 'bcrypt'\nimport { MongoClient } from 'mongodb'\n\nconst uri = \"mongodb://mongo:27017\";\n\nconst SALT_ROUNDS = 12\n\nconst client = new MongoClient(uri);\n\nconst handleGet = async (res) => {\n  res.statusCode = 200\n  res.setHeader('Content-Type','text/html')\n  res.send(`\n    <form method='post' action='/api/auth/register'>\n      <label>\n        Username\n        <input name='username' type='text'/>\n      </label>\n      <label>\n        Password\n        <input name='password' type='text'/>\n      </label>\n      <button type='submit'>Register</button>\n    </form>\n  `)\n}\n\nconst handlePost = async (username, password, method, res) => {\n  await client.connect()\n  const database = client.db(\"accounts\")\n  const collection = database.collection(\"users\")\n\n  let hash = await bcrypt.hash(password, SALT_ROUNDS)\n\n  const user = { username, hash };\n  const result = await collection.insertOne(user);\n\n  console.log(result)\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'application/json')\n  res.end(JSON.stringify(result))\n}\n\nexport default async ({body: {username, password}, method}, res) => {\n  if (method !== \"POST\" && method !== \"GET\") {\n    res.statusCode = 405\n    res.setHeader('Content-Type', 'application/json')\n    res.end(JSON.stringify({message: \"Register only accepts GET or POST requests\"}))\n  }\n  else if (method === \"GET\") await handleGet(res)\n  else await handlePost(username, password, method, res)\n}"]},"metadata":{},"sourceType":"module"}