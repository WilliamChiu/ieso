{"ast":null,"code":"import logger from 'next-auth/dist/lib/logger';\nimport parseUrl from 'next-auth/dist/lib/parse-url'; // This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\n\nconst __NEXTAUTH = {\n  baseUrl: parseUrl(process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,\n  basePath: parseUrl(process.env.NEXTAUTH_URL).basePath,\n  keepAlive: 0,\n  // 0 == disabled (don't send); 60 == send every 60 seconds\n  clientMaxAge: 0,\n  // 0 == disabled (only use cache); 60 == sync if last checked > 60 seconds ago\n  // Properties starting with _ are used for tracking internal app state\n  _clientLastSync: 0,\n  // used for timestamp since last sycned (in seconds)\n  _clientSyncTimer: null,\n  // stores timer for poll interval\n  _eventListenersAdded: false,\n  // tracks if event listeners have been added,\n  _clientSession: undefined,\n  // stores last session response from hook,\n  // Generate a unique ID to make it possible to identify when a message\n  // was sent from this tab/window so it can be ignored to avoid event loops.\n  _clientId: Math.random().toString(36).substring(2) + Date.now().toString(36),\n  // Used to store to function export by getSession() hook\n  _getSession: () => {}\n};\n\nconst _apiBaseUrl = () => {\n  if (true) {\n    // NEXTAUTH_URL should always be set explicitly to support server side calls - log warning if not set\n    if (!process.env.NEXTAUTH_URL) {\n      logger.warn('NEXTAUTH_URL', 'NEXTAUTH_URL environment variable not set');\n    } // Return absolute path when called server side\n\n\n    return `${__NEXTAUTH.baseUrl}${__NEXTAUTH.basePath}`;\n  } else {\n    // Return relative path when called client side\n    return __NEXTAUTH.basePath;\n  }\n};\n\nexport default (async () => {\n  const baseUrl = _apiBaseUrl();\n\n  const callbackUrl = args && args.callbackUrl ? args.callbackUrl : window.location; // Redirect to sign in page if no valid provider specified\n\n  window.location = `${baseUrl}/register?callbackUrl=${encodeURIComponent(callbackUrl)}`;\n});","map":{"version":3,"sources":["/usr/src/app/scripts/register.js"],"names":["logger","parseUrl","__NEXTAUTH","baseUrl","process","env","NEXTAUTH_URL","VERCEL_URL","basePath","keepAlive","clientMaxAge","_clientLastSync","_clientSyncTimer","_eventListenersAdded","_clientSession","undefined","_clientId","Math","random","toString","substring","Date","now","_getSession","_apiBaseUrl","warn","callbackUrl","args","window","location","encodeURIComponent"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,OAAO,EAAEF,QAAQ,CAACG,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4BF,OAAO,CAACC,GAAR,CAAYE,UAAzC,CAAR,CAA6DJ,OADrD;AAEjBK,EAAAA,QAAQ,EAAEP,QAAQ,CAACG,OAAO,CAACC,GAAR,CAAYC,YAAb,CAAR,CAAmCE,QAF5B;AAGjBC,EAAAA,SAAS,EAAE,CAHM;AAGH;AACdC,EAAAA,YAAY,EAAE,CAJG;AAIA;AACjB;AACAC,EAAAA,eAAe,EAAE,CANA;AAMG;AACpBC,EAAAA,gBAAgB,EAAE,IAPD;AAOO;AACxBC,EAAAA,oBAAoB,EAAE,KARL;AAQY;AAC7BC,EAAAA,cAAc,EAAEC,SATC;AASU;AAC3B;AACA;AACAC,EAAAA,SAAS,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,IAA0CC,IAAI,CAACC,GAAL,GAAWH,QAAX,CAAoB,EAApB,CAZpC;AAajB;AACAI,EAAAA,WAAW,EAAE,MAAM,CAAE;AAdJ,CAAnB;;AAiBA,MAAMC,WAAW,GAAG,MAAM;AACxB,YAAmC;AACjC;AACA,QAAI,CAACpB,OAAO,CAACC,GAAR,CAAYC,YAAjB,EAA+B;AAAEN,MAAAA,MAAM,CAACyB,IAAP,CAAY,cAAZ,EAA4B,2CAA5B;AAA0E,KAF1E,CAIjC;;;AACA,WAAQ,GAAEvB,UAAU,CAACC,OAAQ,GAAED,UAAU,CAACM,QAAS,EAAnD;AACD,GAND,MAMO;AACL;AACA,WAAON,UAAU,CAACM,QAAlB;AACD;AACF,CAXD;;AAaA,gBAAe,YAAY;AACzB,QAAML,OAAO,GAAGqB,WAAW,EAA3B;;AACA,QAAME,WAAW,GAAIC,IAAI,IAAIA,IAAI,CAACD,WAAd,GAA6BC,IAAI,CAACD,WAAlC,GAAgDE,MAAM,CAACC,QAA3E,CAFyB,CAIzB;;AACAD,EAAAA,MAAM,CAACC,QAAP,GAAmB,GAAE1B,OAAQ,yBAAwB2B,kBAAkB,CAACJ,WAAD,CAAc,EAArF;AACD,CAND","sourcesContent":["import logger from 'next-auth/dist/lib/logger'\nimport parseUrl from 'next-auth/dist/lib/parse-url'\n\n// This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\nconst __NEXTAUTH = {\n  baseUrl: parseUrl(process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,\n  basePath: parseUrl(process.env.NEXTAUTH_URL).basePath,\n  keepAlive: 0, // 0 == disabled (don't send); 60 == send every 60 seconds\n  clientMaxAge: 0, // 0 == disabled (only use cache); 60 == sync if last checked > 60 seconds ago\n  // Properties starting with _ are used for tracking internal app state\n  _clientLastSync: 0, // used for timestamp since last sycned (in seconds)\n  _clientSyncTimer: null, // stores timer for poll interval\n  _eventListenersAdded: false, // tracks if event listeners have been added,\n  _clientSession: undefined, // stores last session response from hook,\n  // Generate a unique ID to make it possible to identify when a message\n  // was sent from this tab/window so it can be ignored to avoid event loops.\n  _clientId: Math.random().toString(36).substring(2) + Date.now().toString(36),\n  // Used to store to function export by getSession() hook\n  _getSession: () => {}\n}\n\nconst _apiBaseUrl = () => {\n  if (typeof window === 'undefined') {\n    // NEXTAUTH_URL should always be set explicitly to support server side calls - log warning if not set\n    if (!process.env.NEXTAUTH_URL) { logger.warn('NEXTAUTH_URL', 'NEXTAUTH_URL environment variable not set') }\n\n    // Return absolute path when called server side\n    return `${__NEXTAUTH.baseUrl}${__NEXTAUTH.basePath}`\n  } else {\n    // Return relative path when called client side\n    return __NEXTAUTH.basePath\n  }\n}\n\nexport default async () => {\n  const baseUrl = _apiBaseUrl()\n  const callbackUrl = (args && args.callbackUrl) ? args.callbackUrl : window.location\n\n  // Redirect to sign in page if no valid provider specified\n  window.location = `${baseUrl}/register?callbackUrl=${encodeURIComponent(callbackUrl)}`\n}"]},"metadata":{},"sourceType":"module"}