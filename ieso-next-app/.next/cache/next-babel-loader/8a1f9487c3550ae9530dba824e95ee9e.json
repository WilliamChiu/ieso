{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport bcrypt from 'bcrypt';\nimport { MongoClient } from 'mongodb';\nconst uri = \"mongodb://mongo:27017\";\nconst client = new MongoClient(uri);\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      },\n      register: {\n        label: \"Register\",\n        type: \"checkbox\"\n      }\n    },\n    authorize: async credentials => {\n      // Add logic here to look up the user from the credentials supplied\n      console.log(credentials);\n      await client.connect();\n      const database = client.db(\"accounts\");\n      const collection = database.collection(\"users\");\n      const query = {\n        username: credentials.username\n      };\n      let found = await collection.findOne(query);\n      console.log(found);\n      if (!found) return Promise.reject('/api/auth/signin?error=CredentialsSignin');\n      let compare = await bcrypt.compare(credentials.password, found.hash);\n      console.log(compare);\n      if (!compare) return Promise.reject('/api/auth/signin?error=CredentialsSignin');\n      return Promise.resolve(found);\n    }\n  })]\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/usr/src/app/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","bcrypt","MongoClient","uri","client","options","providers","Credentials","name","credentials","username","label","type","placeholder","password","register","authorize","console","log","connect","database","db","collection","query","found","findOne","Promise","reject","compare","hash","resolve","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBC,GAAhB,CAAf;AAEA,MAAME,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACTN,SAAS,CAACO,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B,OAFC;AAGXG,MAAAA,QAAQ,EAAE;AAAEJ,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAHC,KANO;AAWpBI,IAAAA,SAAS,EAAE,MAAOP,WAAP,IAAuB;AAChC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AAEA,YAAML,MAAM,CAACe,OAAP,EAAN;AACA,YAAMC,QAAQ,GAAGhB,MAAM,CAACiB,EAAP,CAAU,UAAV,CAAjB;AACA,YAAMC,UAAU,GAAGF,QAAQ,CAACE,UAAT,CAAoB,OAApB,CAAnB;AAEA,YAAMC,KAAK,GAAG;AAAEb,QAAAA,QAAQ,EAAED,WAAW,CAACC;AAAxB,OAAd;AAEA,UAAIc,KAAK,GAAG,MAAMF,UAAU,CAACG,OAAX,CAAmBF,KAAnB,CAAlB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACA,UAAI,CAACA,KAAL,EAAY,OAAOE,OAAO,CAACC,MAAR,CAAe,0CAAf,CAAP;AAEZ,UAAIC,OAAO,GAAG,MAAM3B,MAAM,CAAC2B,OAAP,CAAenB,WAAW,CAACK,QAA3B,EAAqCU,KAAK,CAACK,IAA3C,CAApB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AACA,UAAI,CAACA,OAAL,EAAc,OAAOF,OAAO,CAACC,MAAR,CAAe,0CAAf,CAAP;AAEd,aAAOD,OAAO,CAACI,OAAR,CAAgBN,KAAhB,CAAP;AACD;AA9BmB,GAAtB,CADS;AAFG,CAAhB;AAsCA,gBAAe,CAACO,GAAD,EAAMC,GAAN,KAAcjC,QAAQ,CAACgC,GAAD,EAAMC,GAAN,EAAW3B,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport bcrypt from 'bcrypt'\nimport { MongoClient } from 'mongodb'\n\nconst uri = \"mongodb://mongo:27017\";\n\nconst client = new MongoClient(uri);\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" },\n        register: { label: \"Register\", type: \"checkbox\" }\n      },\n      authorize: async (credentials) => {\n        // Add logic here to look up the user from the credentials supplied\n        console.log(credentials)\n\n        await client.connect()\n        const database = client.db(\"accounts\")\n        const collection = database.collection(\"users\")\n\n        const query = { username: credentials.username }\n\n        let found = await collection.findOne(query)\n        console.log(found)\n        if (!found) return Promise.reject('/api/auth/signin?error=CredentialsSignin')\n\n        let compare = await bcrypt.compare(credentials.password, found.hash)\n        console.log(compare)\n        if (!compare) return Promise.reject('/api/auth/signin?error=CredentialsSignin')\n  \n        return Promise.resolve(found)\n      }\n    })\n  ]\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}