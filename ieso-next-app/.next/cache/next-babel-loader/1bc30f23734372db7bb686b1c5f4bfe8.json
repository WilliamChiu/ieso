{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport { MongoClient } from 'mongodb';\nimport css from 'next-auth/dist/css';\nconsole.log(css);\nconst uri = \"mongodb://mongo:27017\";\nconst SALT_ROUNDS = 12;\nconst client = new MongoClient(uri);\n\nconst handleGet = async (res, error) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/html');\n  res.send(`\n    <!DOCTYPE html>\n      <head>\n        <style type=\"text/css\">${css()}</style>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      </head>\n      <body>\n        <div class=\"page\">\n          <div class='signin'>\n            ${error ? `<div className='error'>\n                <p>That username has already been taken</p>\n              </div>` : \"\"}\n            <div class='provider'>\n              <form method='post' action='/api/auth/register'>\n                <label>\n                  Username\n                  <input name='username' type='text'/>\n                </label>\n                <label>\n                  Password\n                  <input name='password' type='password'/>\n                </label>\n                <button type='submit'>Register</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </body>\n    </html>\n  `);\n};\n\nconst handlePost = async (username, password, callbackUrl, res) => {\n  await client.connect();\n  const database = client.db(\"accounts\");\n  const collection = database.collection(\"users\");\n  let hash = await bcrypt.hash(password, SALT_ROUNDS);\n  const user = {\n    username,\n    hash\n  };\n\n  try {\n    const result = await collection.insertOne(user);\n    console.log(result);\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify(result));\n  } catch (e) {\n    await handleGet(res, true);\n  }\n};\n\nexport default (async ({\n  body: {\n    username,\n    password\n  },\n  method,\n  query: {\n    callbackUrl\n  }\n}, res) => {\n  console.log(callbackUrl);\n\n  if (method !== \"POST\" && method !== \"GET\") {\n    res.statusCode = 405;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({\n      message: \"Register only accepts GET or POST requests\"\n    }));\n  } else if (method === \"GET\") await handleGet(res, false);else await handlePost(username, password, callbackUrl, res);\n});","map":{"version":3,"sources":["/usr/src/app/pages/api/auth/register.js"],"names":["bcrypt","MongoClient","css","console","log","uri","SALT_ROUNDS","client","handleGet","res","error","statusCode","setHeader","send","handlePost","username","password","callbackUrl","connect","database","db","collection","hash","user","result","insertOne","end","JSON","stringify","e","body","method","query","message"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEAC,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,MAAMG,GAAG,GAAG,uBAAZ;AAEA,MAAMC,WAAW,GAAG,EAApB;AAEA,MAAMC,MAAM,GAAG,IAAIN,WAAJ,CAAgBI,GAAhB,CAAf;;AAEA,MAAMG,SAAS,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AACtCD,EAAAA,GAAG,CAACE,UAAJ,GAAiB,GAAjB;AACAF,EAAAA,GAAG,CAACG,SAAJ,CAAc,cAAd,EAA6B,WAA7B;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAAU;;;iCAGqBX,GAAG,EAAG;;;;;;cAMzBQ,KAAK,GACJ;;qBADI,GAGK,EACX;;;;;;;;;;;;;;;;;;GAbX;AAgCD,CAnCD;;AAqCA,MAAMI,UAAU,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,WAA3B,EAAwCR,GAAxC,KAAgD;AACjE,QAAMF,MAAM,CAACW,OAAP,EAAN;AACA,QAAMC,QAAQ,GAAGZ,MAAM,CAACa,EAAP,CAAU,UAAV,CAAjB;AACA,QAAMC,UAAU,GAAGF,QAAQ,CAACE,UAAT,CAAoB,OAApB,CAAnB;AAEA,MAAIC,IAAI,GAAG,MAAMtB,MAAM,CAACsB,IAAP,CAAYN,QAAZ,EAAsBV,WAAtB,CAAjB;AAEA,QAAMiB,IAAI,GAAG;AAAER,IAAAA,QAAF;AAAYO,IAAAA;AAAZ,GAAb;;AAEA,MAAI;AACF,UAAME,MAAM,GAAG,MAAMH,UAAU,CAACI,SAAX,CAAqBF,IAArB,CAArB;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAYoB,MAAZ;AACAf,IAAAA,GAAG,CAACE,UAAJ,GAAiB,GAAjB;AACAF,IAAAA,GAAG,CAACG,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAH,IAAAA,GAAG,CAACiB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAR;AACD,GAND,CAME,OAAOK,CAAP,EAAU;AACV,UAAMrB,SAAS,CAACC,GAAD,EAAM,IAAN,CAAf;AACD;AAEF,CAnBD;;AAqBA,gBAAe,OAAO;AAACqB,EAAAA,IAAI,EAAE;AAACf,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAP;AAA6Be,EAAAA,MAA7B;AAAqCC,EAAAA,KAAK,EAAE;AAACf,IAAAA;AAAD;AAA5C,CAAP,EAAmER,GAAnE,KAA2E;AACxFN,EAAAA,OAAO,CAACC,GAAR,CAAYa,WAAZ;;AACA,MAAIc,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AACzCtB,IAAAA,GAAG,CAACE,UAAJ,GAAiB,GAAjB;AACAF,IAAAA,GAAG,CAACG,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAH,IAAAA,GAAG,CAACiB,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAACK,MAAAA,OAAO,EAAE;AAAV,KAAf,CAAR;AACD,GAJD,MAKK,IAAIF,MAAM,KAAK,KAAf,EAAsB,MAAMvB,SAAS,CAACC,GAAD,EAAM,KAAN,CAAf,CAAtB,KACA,MAAMK,UAAU,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCR,GAAlC,CAAhB;AACN,CATD","sourcesContent":["import bcrypt from 'bcrypt'\nimport { MongoClient } from 'mongodb'\nimport css from 'next-auth/dist/css'\n\nconsole.log(css)\n\nconst uri = \"mongodb://mongo:27017\";\n\nconst SALT_ROUNDS = 12\n\nconst client = new MongoClient(uri);\n\nconst handleGet = async (res, error) => {\n  res.statusCode = 200\n  res.setHeader('Content-Type','text/html')\n  res.send(`\n    <!DOCTYPE html>\n      <head>\n        <style type=\"text/css\">${css()}</style>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      </head>\n      <body>\n        <div class=\"page\">\n          <div class='signin'>\n            ${error ?\n              `<div className='error'>\n                <p>That username has already been taken</p>\n              </div>` : \"\"\n            }\n            <div class='provider'>\n              <form method='post' action='/api/auth/register'>\n                <label>\n                  Username\n                  <input name='username' type='text'/>\n                </label>\n                <label>\n                  Password\n                  <input name='password' type='password'/>\n                </label>\n                <button type='submit'>Register</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </body>\n    </html>\n  `)\n}\n\nconst handlePost = async (username, password, callbackUrl, res) => {\n  await client.connect()\n  const database = client.db(\"accounts\")\n  const collection = database.collection(\"users\")\n\n  let hash = await bcrypt.hash(password, SALT_ROUNDS)\n\n  const user = { username, hash }\n\n  try {\n    const result = await collection.insertOne(user)\n    console.log(result)\n    res.statusCode = 200\n    res.setHeader('Content-Type', 'application/json')\n    res.end(JSON.stringify(result))\n  } catch (e) {\n    await handleGet(res, true)\n  }\n\n}\n\nexport default async ({body: {username, password}, method, query: {callbackUrl}}, res) => {\n  console.log(callbackUrl)\n  if (method !== \"POST\" && method !== \"GET\") {\n    res.statusCode = 405\n    res.setHeader('Content-Type', 'application/json')\n    res.end(JSON.stringify({message: \"Register only accepts GET or POST requests\"}))\n  }\n  else if (method === \"GET\") await handleGet(res, false)\n  else await handlePost(username, password, callbackUrl, res)\n}"]},"metadata":{},"sourceType":"module"}