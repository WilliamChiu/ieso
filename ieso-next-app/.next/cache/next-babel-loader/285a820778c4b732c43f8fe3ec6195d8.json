{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [// Providers.Credentials({\n    //   // The name to display on the sign in form (e.g. 'Sign in with...')\n    //   name: 'Credentials',\n    //   // The credentials is used to generate a suitable form on the sign in page.\n    //   // You can specify whatever fields you are expecting to be submitted.\n    //   // e.g. domain, username, password, 2FA token, etc.\n    //   credentials: {\n    //     username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n    //     password: {  label: \"Password\", type: \"password\" }\n    //   },\n    //   authorize: async (credentials) => {\n    //     // Add logic here to look up the user from the credentials supplied\n    //     console.log(credentials)\n    //     const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n    //     if (user) {\n    //       // Any object returned will be saved in `user` property of the JWT\n    //       return Promise.resolve(user)\n    //     } else {\n    //       // If you return null or false then the credentials will be rejected\n    //       return Promise.resolve(null)\n    //       // You can also Reject this callback with an Error or with a URL:\n    //       // return Promise.reject(new Error('error message')) // Redirect to error page\n    //       // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n    //     }\n    //   }\n    // })\n  ]\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/chillyblue/Documents/Programming/ieso/ieso-next-app/pages/api/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CACA;;AAEA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BS;AAFG,CAAhB;AAiCA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcL,QAAQ,CAACI,GAAD,EAAMC,GAAN,EAAWH,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n// import argon2 from 'argon2'\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    // Providers.Credentials({\n    //   // The name to display on the sign in form (e.g. 'Sign in with...')\n    //   name: 'Credentials',\n    //   // The credentials is used to generate a suitable form on the sign in page.\n    //   // You can specify whatever fields you are expecting to be submitted.\n    //   // e.g. domain, username, password, 2FA token, etc.\n    //   credentials: {\n    //     username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n    //     password: {  label: \"Password\", type: \"password\" }\n    //   },\n    //   authorize: async (credentials) => {\n    //     // Add logic here to look up the user from the credentials supplied\n    //     console.log(credentials)\n    //     const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n  \n    //     if (user) {\n    //       // Any object returned will be saved in `user` property of the JWT\n    //       return Promise.resolve(user)\n    //     } else {\n    //       // If you return null or false then the credentials will be rejected\n    //       return Promise.resolve(null)\n    //       // You can also Reject this callback with an Error or with a URL:\n    //       // return Promise.reject(new Error('error message')) // Redirect to error page\n    //       // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n    //     }\n    //   }\n    // })\n  ]\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}