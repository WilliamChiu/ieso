{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport bcrypt from 'bcrypt';\nimport { MongoClient } from 'mongodb';\nconst uri = \"mongodb://mongo:27017\";\nconst client = new MongoClient(uri);\nconst SALT_ROUNDS = 12;\n\nconst signIn = async ({\n  username,\n  password\n}) => {\n  await client.connect();\n  const database = client.db(\"accounts\");\n  const collection = database.collection(\"users\");\n  const query = {\n    username: username\n  };\n  let found = await collection.findOne(query);\n  if (!found) return Promise.reject('/auth/signin?error=CredentialsSignin');\n  let compare = await bcrypt.compare(password, found.hash);\n  if (!compare) return Promise.reject('/auth/signin?error=CredentialsSignin');\n  return Promise.resolve(found);\n};\n\nconst register = async ({\n  username,\n  password\n}) => {\n  await client.connect();\n  const database = client.db(\"accounts\");\n  const collection = database.collection(\"users\");\n  let hash = await bcrypt.hash(password, SALT_ROUNDS);\n  const user = {\n    username,\n    hash\n  };\n\n  try {\n    let found = await collection.insertOne(user);\n    return Promise.resolve(found);\n  } catch (e) {\n    return Promise.reject('/auth/signin?error=CredentialsSignin');\n  }\n};\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      },\n      register: {\n        label: \"Register\",\n        type: \"checkbox\"\n      }\n    },\n    authorize: async credentials => {\n      console.log(\"test\", credentials);\n      if (credentials.register === \"true\") return register(credentials);else return signIn(credentials);\n    }\n  })],\n  pages: {\n    signIn: '/auth/signin'\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/usr/src/app/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","bcrypt","MongoClient","uri","client","SALT_ROUNDS","signIn","username","password","connect","database","db","collection","query","found","findOne","Promise","reject","compare","hash","resolve","register","user","insertOne","e","options","providers","Credentials","name","credentials","label","type","placeholder","authorize","console","log","pages","req","res"],"mappings":"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","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport bcrypt from 'bcrypt'\nimport { MongoClient } from 'mongodb'\n\nconst uri = \"mongodb://mongo:27017\";\nconst client = new MongoClient(uri);\nconst SALT_ROUNDS = 12\n\nconst signIn = async ({username, password}) => {\n  await client.connect()\n  const database = client.db(\"accounts\")\n  const collection = database.collection(\"users\")\n\n  const query = { username: username }\n\n  let found = await collection.findOne(query)\n  if (!found) return Promise.reject('/auth/signin?error=CredentialsSignin')\n\n  let compare = await bcrypt.compare(password, found.hash)\n  if (!compare) return Promise.reject('/auth/signin?error=CredentialsSignin')\n\n  return Promise.resolve(found)\n}\n\nconst register = async ({username, password}) => {\n  await client.connect()\n  const database = client.db(\"accounts\")\n  const collection = database.collection(\"users\")\n\n  let hash = await bcrypt.hash(password, SALT_ROUNDS)\n\n  const user = { username, hash }\n\n  try {\n    let found = await collection.insertOne(user)\n    return Promise.resolve(found)\n  } catch (e) {\n    return Promise.reject('/auth/signin?error=CredentialsSignin')\n  }\n}\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" },\n        register: { label: \"Register\", type: \"checkbox\" }\n      },\n      authorize: async credentials => {\n        console.log(\"test\", credentials)\n        if (credentials.register === \"true\") return register(credentials)\n        else return signIn(credentials)\n      }\n    })\n  ],\n  pages: {\n    signIn: '/auth/signin'\n  }\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}